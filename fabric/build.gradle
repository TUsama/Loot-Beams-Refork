plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
    id "me.modmuss50.mod-publish-plugin" version "0.8.1"
    id 'com.gradleup.shadow' version '9.0.0-beta4'

}
base {
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}
configurations {
    shade
    implementation.extendsFrom shade
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

    modImplementation "me.fzzyhmstrs:fzzy_config:${fzzy_config_version}"
    modCompileOnly "dev.emi:trinkets:3.10.0"
    modCompileOnly "curse.maven:accessories-938917:5727156"
    //modImplementation "curse.maven:charm-of-undying-316873:5159191"

    modImplementation "curse.maven:nirvana-library-1164411:6473163"

    modCompileOnly "curse.maven:tieredz-615948:5934487"

    modImplementation "curse.maven:tiered-forge-453889:6206677"
    modImplementation "curse.maven:unionlib-367806:5997472"
    implementation 'org.tomlj:tomlj:1.1.1'

}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}


processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from project(":common").sourceSets.main.resources
}

shadowJar {
    configurations = [project.configurations.shade]
    archiveClassifier = "shadow"
    relocate 'net.neoforged.bus', "${project.group}.relocated.net.neoforged.bus"
}

remapJar {
    dependsOn(shadowJar)
    mustRunAfter(shadowJar)
    inputFile = file(tasks.shadowJar.archiveFile)
}




