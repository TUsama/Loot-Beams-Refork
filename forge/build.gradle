

plugins {
    id 'idea'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.1'
    id "me.modmuss50.mod-publish-plugin" version "0.8.1"
}

def namePattern = "${mod_name}-forge-${minecraft_version}"
base {
    archivesName = namePattern
}
mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}



configurations {
    shade.extendsFrom(minecraftLibrary)
    implementation.extendsFrom shade
}

minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'

    copyIdeResources = true //Calls processResources when in dev

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'



    compileOnly fg.deobf("curse.maven:apotheosis-313970:5753183")
    compileOnly fg.deobf("curse.maven:placebo-283644:5414631")
    compileOnly fg.deobf("curse.maven:patchouli-306770:4966125")
    compileOnly fg.deobf("curse.maven:apothic-attributes-898963:5634071")



    compileOnly fg.deobf("curse.maven:library-of-exile-398780:5934664")
    compileOnly fg.deobf("curse.maven:mine-and-slash-reloaded-306575:5939398")
    //runtimeOnly fg.deobf("curse.maven:playeranimator-658587:4587214")

    compileOnly fg.deobf("curse.maven:legendary-tooltips-532127:4662781")
    /*runtimeOnly fg.deobf("curse.maven:prism-lib-638111:4650325")
    runtimeOnly fg.deobf("curse.maven:iceberg-520110:5838149")*/

    compileOnly fg.deobf("curse.maven:obscure-tooltips-715660:4686579")

    compileOnly fg.deobf("curse.maven:spartan-weaponry-278141:5597663")

    implementation(fg.deobf("me.fzzyhmstrs:fzzy_config:${fzzy_config_version}+forge"))
    implementation("thedarkcolour:kotlinforforge:4.11.0")

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.11.0+1.20.1")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.11.0+1.20.1:api")

    runtimeOnly fg.deobf("curse.maven:balkons-weaponmod-legacy-1033985:5853414")
    runtimeOnly fg.deobf("curse.maven:architectury-api-419699:5137938")
    runtimeOnly fg.deobf("curse.maven:cloth-config-348521:5729105")
    runtimeOnly fg.deobf("curse.maven:crafttweaker-239197:5880672")



    minecraftLibrary "io.vavr:vavr:0.10.4"
    minecraftLibrary ("net.neoforged:bus:${neoforge_eventbus_version}") {
        exclude group: "org.ow2.asm"
        exclude group: "net.jodah"
        exclude group: "org.apache.logging.log4j"
        exclude group: "cpw.mods", module: "modlauncher"
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

//https://gist.github.com/SizableShrimp/949e7c219bfc94487a45226b64ac7749
shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'net.neoforged.bus', "${project.group}.relocated.net.neoforged.bus"
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

publishMods {
    file = tasks.shadowJar.archiveFile
    displayName = file.map { it.asFile.name }
    changelog = file("..\\changelog.md").text.split('\n').collect { string -> {
        if (!string.isBlank()) {
            string + "</br>"
        } else {
            string
        }
    }}.join('\n')
    type = STABLE
    modLoaders.add("forge")
    curseforge {
        accessToken = file("D:\\curseforge-key.txt").text
        projectId = "1150640"
        clientRequired = true
        minecraftVersions.add("1.20.1")
        requires("fzzy-config")
        optional("mine-and-slash-reloaded", "apotheosis")
        incompatible("loot-beams")
    }
}


